{
  "policyUpi": "PC-ALL-ALL-1301",
  "policyId": "a194411a-7d3f-48fa-999d-02313f69d252",
  "policyType": "network",
  "cloudType": "azure",
  "severity": "high",
  "name": "Azure AKS K8s service with network path from the internet (0.0.0.0/0) on ports 80/443",
  "description": "Azure Kubernetes Service (AKS) clusters exposing ports 80 and 443 to the internet (0.0.0.0/0) present a significant security risk. This misconfiguration exposes the cluster to a wide range of attacks.\n\nAKS clusters, by default, should not be directly accessible from the internet. Opening ports 80 and 443 to 0.0.0.0/0 allows untrusted IPs to directly access the Kubernetes API server and potentially any exposed applications within the cluster. This greatly expands the attack surface, making the cluster vulnerable to unauthorized access, data breaches, and service disruptions.\n\nThe impact of this misconfiguration could be severe, leading to data exfiltration, application compromise, and potential ransomware attacks. Implementing proper network segmentation and access controls is critical to minimize this risk. Restricting access to only trusted IP addresses or using a reverse proxy with appropriate authentication and authorization mechanisms is essential.\n\nTo mitigate this risk, limit network access to the AKS cluster. Use Network Policies to control traffic within the cluster. Implement a reverse proxy like Nginx or HAProxy in front of the services to handle external traffic and enforce security policies, such as authentication and authorization. Only allow trusted IP addresses to access the cluster.",
  "rule.criteria": "6ebe462f-7006-4647-8ae9-6baa350b9614",
  "searchModel.query": "config from network where source.network = '0.0.0.0/0' and address.match.criteria = 'full_match' and dest.resource.type = 'K8s Service' and dest.cloud.type = 'AZURE' and protocol.ports in ( 'tcp/80' , 'tcp/443' )",
  "recommendation": "The following steps are recommended to restrict container service from having unrestricted access from the Internet:\n1. Visit the Network path Analysis from Source to Destination and review the network path components that allow internet access.\n2. Identify the network component on which restrictive rules can be implemented.\n3. Implement either of the following required changes and make sure no other resources have been impacted due to these changes:\n a) Create Kubernetes Network Policies to control traffic to and from your pods.\n b) Restrict inbound traffic to specific IP ranges for the Loadbalancer on container service.\n c) Move the container/app inside a restrictive subnet if it does not need to be publicly accessible.\n d) Remove or disassociate the public IP assigned to the respective container service.",
  "remediable": false,
  "remediation.cliScriptTemplate": "",
  "remediation.description": "",
  "remediation.impact": "",
  "compliance.standard": ""
}